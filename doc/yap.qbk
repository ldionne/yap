[/
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[library Boost.YAP (Proposed)
    [quickbook 1.3]
    [authors [Laine, Zach]]
    [copyright 2016 T. Zachary Laine]
    [category template]
    [id yap]
    [dirname yap]
    [purpose
        An expression template library for newer standards of C++.
    ]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[/ QuickBook Document version 1.3 ]

[/ Imports ]

[import other_snippets.cpp]
[import ../example/hello_world.cpp]
[import ../example/hello_world_redux.cpp]
[import ../example/minimal.cpp]
[import ../example/calc1.cpp]
[import ../example/calc2a.cpp]
[import ../example/calc2b.cpp]
[import ../example/calc3.cpp]
[import ../example/lazy_vector.cpp]
[import ../example/tarray.cpp]
[import ../example/vec3.cpp]
[import ../example/vector.cpp]
[import ../example/mixed.cpp]
[import ../example/map_assign.cpp]
[import ../example/future_group.cpp]
[import ../test/user_expression_transform_2.cpp]
[import ../test/user_expression_transform_3.cpp]


[/ Images ]

[def __note__              [$images/note.png]]
[def __tip__               [$images/tip.png]]
[def __important__         [$images/important.png]]
[def __caution__           [$images/caution.png]]
[def __warning__           [$images/warning.png]]

[/ Links ]

[def _yap_                 Boost.YAP]

[def _Expr_                [link boost_yap__proposed_.concepts.expression Expression]]
[def _Exprs_               [link boost_yap__proposed_.concepts.expression Expressions]]
[def _ExprTmpl_            [link boost_yap__proposed_.concepts.expressiontemplate ExpressionTemplate]]
[def _ExprTmpls_           [link boost_yap__proposed_.concepts.expressiontemplate ExpressionTemplates]]
[def _XForm_               [link boost_yap__proposed_.concepts.transform Transform]]
[def _XForms_              [link boost_yap__proposed_.concepts.transform Transforms]]
[def _ExprXForm_           [link boost_yap__proposed_.concepts.expressiontransform ExpressionTransform]]
[def _ExprXForms_          [link boost_yap__proposed_.concepts.expressiontransform ExpressionTransforms]]
[def _TagXForm_            [link boost_yap__proposed_.concepts.tagtransform TagTransform]]
[def _TagXForms_           [link boost_yap__proposed_.concepts.tagtransform TagTransforms]]
[def _Callable_            [@http://en.cppreference.com/w/cpp/concept/Callable Callable]]
[def _Callables_           [@http://en.cppreference.com/w/cpp/concept/Callable Callables]]

[def _expr_                [classref boost::yap::expression `expression<>`]]
[def _kind_                [enumref boost::yap::expr_kind `expr_kind`]]
[def _terminal_            [link boost.yap.expr_kind.terminal `expr_kind::terminal`]]
[def _placeholder_         [link boost.yap.expr_kind.placeholder `expr_kind::placeholder`]]
[def _if_else_             [link boost.yap.expr_kind.if_else `expr_kind::if_else`]]
[def _expr_ref_            [link boost.yap.expr_kind.expr_ref `expr_kind::expr_ref`]]
[def _xform_               [funcref boost::yap::transform `transform()`]]
[def _eval_                [funcref boost::yap::transform `evaluate()`]]
[def _eval_as_             [funcref boost::yap::transform `evaluate_as()`]]
[def _tuple_               `boost::hana::tuple<>`]
[def _ops_header_          [headerref boost/yap/operators.hpp operators header]]

[def _make_term_           [funcref boost::yap::make_terminal `make_terminal()`]]
[def _make_expr_           [funcref boost::yap::make_expression `make_expression()`]]
[def _make_expr_fn_        [funcref boost::yap::make_expression_function `make_expression_function()`]]
[def _left_                [funcref boost::yap::left `left()`]]
[def _right_               [funcref boost::yap::right `right()`]]
[def _value_               [funcref boost::yap::value `value()`]]

[def _unary_member_m_      [macroref BOOST_YAP_USER_UNARY_OPERATOR_MEMBER]]
[def _binary_member_m_     [macroref BOOST_YAP_USER_BINARY_OPERATOR_MEMBER]]
[def _member_call_m_       [macroref BOOST_YAP_USER_MEMBER_CALL_OPERATOR]]
[def _binary_free_m_       [macroref BOOST_YAP_USER_FREE_BINARY_OPERATOR]]
[def _expr_if_else_m_      [macroref BOOST_YAP_USER_EXPR_IF_ELSE]]
[def _udt_any_if_else_m_   [macroref BOOST_YAP_USER_UDT_ANY_IF_ELSE]]
[def _udt_unary_m_         [macroref BOOST_YAP_USER_UDT_UNARY_OPERATOR]]
[def _udt_udt_binary_m_    [macroref BOOST_YAP_USER_UDT_UDT_BINARY_OPERATOR]]
[def _udt_any_binary_m_    [macroref BOOST_YAP_USER_UDT_ANY_BINARY_OPERATOR]]
[def _conv_op_m_           [macroref BOOST_YAP_CONVERSION_OPERATOR_TEMPLATE]]

[def _spirit_              [@http://boost-spirit.com Boost.Spirit]]
[def _eigen_               [@http://eigen.tuxfamily.org Eigen]]
[def _nt2_                 [@https://www.lri.fr/~falcou/nt2 NT2]]
[def _range_v3_            [@https://github.com/ericniebler/range-v3 Range-v3]]

[def _Ets_                 Expression templates]
[def _et_                  expression template]
[def _ets_                 expression templates]
[def _cp_                  customization point]
[def _cps_                 customization points]

[def _how_treated_         [link boost_yap__proposed_.manual.tutorial.how_expression_operands_are_treated How Expression Operands Are Treated]]

[include intro.qbk]
[include manual.qbk]
[include concepts.qbk]

[xinclude yap_reference.xml]

[include rationale.qbk]
